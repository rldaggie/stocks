class CompanyDecorator < Draper::Base
  decorates :company
  
  def annual_cash_flow_statements_hash
    statements = model.cash_flow_statements.annual.limit(5)    
    CashFlowStatement::ALL_ITEMS_KEYS.inject({}) do |the_hash, the_method|
      the_hash[the_method] = []
      statements.each do |statement|
        the_hash[the_method] << statement[the_method]
      end
      the_hash
    end
  end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end
